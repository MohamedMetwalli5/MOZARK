{"remainingRequest":"D:\\projects\\MOZARK\\front-end\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\projects\\MOZARK\\front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\projects\\MOZARK\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\projects\\MOZARK\\front-end\\src\\components\\AdminSettings.vue?vue&type=template&id=4c1060dc&scoped=true&","dependencies":[{"path":"D:\\projects\\MOZARK\\front-end\\src\\components\\AdminSettings.vue","mtime":1639263129237},{"path":"D:\\projects\\MOZARK\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\MOZARK\\front-end\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\projects\\MOZARK\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\projects\\MOZARK\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}